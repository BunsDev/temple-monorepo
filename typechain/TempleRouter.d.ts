/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TempleRouterInterface extends ethers.utils.Interface {
  functions: {
    "aboveTargetTreasuryDistributeRatio()": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "buyTemple(uint256,uint256,address,uint256)": FunctionFragment;
    "pairContract()": FunctionFragment;
    "pairToken()": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "sellTemple(uint256,uint256,address,uint256)": FunctionFragment;
    "setAboveTargetTreasuryDistributeRatio(uint256)": FunctionFragment;
    "setTargetPrice(tuple)": FunctionFragment;
    "targetPrice()": FunctionFragment;
    "templeToken()": FunctionFragment;
    "templeTreasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aboveTargetTreasuryDistributeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTemple",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTemple",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAboveTargetTreasuryDistributeRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetPrice",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "targetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeTreasury",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aboveTargetTreasuryDistributeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTemple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTemple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAboveTargetTreasuryDistributeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeTreasury",
    data: BytesLike
  ): Result;

  events: {};
}

export class TempleRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TempleRouterInterface;

  functions: {
    aboveTargetTreasuryDistributeRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addLiquidity(
      amountTempleDesired: BigNumberish,
      amountPairDesired: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairContract(overrides?: CallOverrides): Promise<[string]>;

    pairToken(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAboveTargetTreasuryDistributeRatio(
      _aboveTargetTreasuryDistributeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetPrice(
      _targetPrice: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    templeTreasury(overrides?: CallOverrides): Promise<[string]>;
  };

  aboveTargetTreasuryDistributeRatio(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addLiquidity(
    amountTempleDesired: BigNumberish,
    amountPairDesired: BigNumberish,
    amountTempleMin: BigNumberish,
    amountPairMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTemple(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairContract(overrides?: CallOverrides): Promise<string>;

  pairToken(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    liquidity: BigNumberish,
    amountTempleMin: BigNumberish,
    amountPairMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTemple(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAboveTargetTreasuryDistributeRatio(
    _aboveTargetTreasuryDistributeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetPrice(
    _targetPrice: { numerator: BigNumberish; denominator: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  templeToken(overrides?: CallOverrides): Promise<string>;

  templeTreasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aboveTargetTreasuryDistributeRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      amountTempleDesired: BigNumberish,
      amountPairDesired: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    buyTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pairContract(overrides?: CallOverrides): Promise<string>;

    pairToken(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    sellTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAboveTargetTreasuryDistributeRatio(
      _aboveTargetTreasuryDistributeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetPrice(
      _targetPrice: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    targetPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    templeToken(overrides?: CallOverrides): Promise<string>;

    templeTreasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    aboveTargetTreasuryDistributeRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      amountTempleDesired: BigNumberish,
      amountPairDesired: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairContract(overrides?: CallOverrides): Promise<BigNumber>;

    pairToken(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAboveTargetTreasuryDistributeRatio(
      _aboveTargetTreasuryDistributeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetPrice(
      _targetPrice: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    templeTreasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aboveTargetTreasuryDistributeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amountTempleDesired: BigNumberish,
      amountPairDesired: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountTempleMin: BigNumberish,
      amountPairMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAboveTargetTreasuryDistributeRatio(
      _aboveTargetTreasuryDistributeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetPrice(
      _targetPrice: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
